// http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf
// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html
@export split_sum.prefilter_envmap

#define SAMPLE_NUMBER 1024
#define PI 3.14159265358979

uniform mat4 viewInverse : VIEWINVERSE;
uniform samplerCube environmentMap;
uniform sampler2D normalDistribution;

uniform float roughness : 0.5;

varying vec2 v_Texcoord;
varying vec3 v_WorldPosition;

const float fSampleNumber = float(SAMPLE_NUMBER);

vec3 importanceSampleNormal(float i, float roughness, vec3 N) {
    vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;

    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangentX = normalize(cross(upVector, N));
    vec3 tangentY = cross(N, tangentX);
    // Tangent to world space
    return tangentX * H.x + tangentY * H.y + N * H.z;
}

void main() {

    vec3 eyePos = viewInverse[3].xyz;
    vec3 V = normalize(v_WorldPosition - eyePos);

    vec3 N = V;
    vec3 R = V;

    vec3 prefilteredColor = vec3(0.0);
    float totalWeight = 0.0;

    for (int i = 0; i < SAMPLE_NUMBER; i++) {
        vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);
        vec3 L = reflect(-V, H);

        float NoL = clamp(dot(N, L), 0.0, 1.0);
        if (NoL > 0.0) {
            prefilteredColor += textureCube(environmentMap, L).rgb * NoL;
            totalWeight += NoL;
        }
    }

    gl_FragColor.rgb = prefilteredColor / totalWeight;
    gl_FragColor.a = 1.0;
}

@end


@export split_sum.integrate_BRDF

#define SAMPLE_NUMBER 1024
#define PI 3.14159265358979


uniform sampler2D normalDistribution;

uniform vec2 viewportSize : [512, 256];

const vec3 N = vec3(0.0, 0.0, 1.0);
const float fSampleNumber = float(SAMPLE_NUMBER);

vec3 importanceSampleNormal(float i, float roughness, vec3 N) {
    vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;

    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangentX = normalize(cross(upVector, N));
    vec3 tangentY = cross(N, tangentX);
    // Tangent to world space
    return tangentX * H.x + tangentY * H.y + N * H.z;
}

float G_Smith(float roughness, float NoV, float NoL) {
    // float k = (roughness+1.0) * (roughness+1.0) * 0.125;
    float k = roughness * roughness / 2.0;
    float G1V = NoV / (NoV * (1.0 - k) + k);
    float G1L = NoL / (NoL * (1.0 - k) + k);
    return G1L * G1V;
}

void main() {
    vec2 uv = gl_FragCoord.xy / viewportSize;
    float NoV = uv.x;
    float roughness = uv.y;

    vec3 V;
    V.x = sqrt(1.0 - NoV * NoV);
    V.y = 0.0;
    V.z = NoV;

    float A = 0.0;
    float B = 0.0;

    for (int i = 0; i < SAMPLE_NUMBER; i++) {
        vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);
        vec3 L = reflect(-V, H);
        float NoL = clamp(L.z, 0.0, 1.0);
        float NoH = clamp(H.z, 0.0, 1.0);
        float VoH = clamp(dot(V, H), 0.0, 1.0);

        if (NoL > 0.0) {
            float G = G_Smith(roughness, NoV, NoL);
            float G_Vis = G * VoH / (NoH * NoV);
            float Fc = pow(1.0 - VoH, 5.0);
            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    gl_FragColor = vec4(vec2(A, B) / fSampleNumber, 0.0, 1.0);
}

@end

@export split_sum.fragment

uniform mat4 viewInverse : VIEWINVERSE;

varying vec2 v_Texcoord;
varying vec3 v_LocalNormal;
varying vec3 v_Normal;
varying vec3 v_WorldPosition;
varying vec3 v_Tangent;
varying vec3 v_Bitangent;
varying vec3 v_Weight;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform samplerCube environmentMap1;
uniform samplerCube environmentMap2;
uniform sampler2D BRDFLookup;

uniform vec3 color : [1.0, 1.0, 1.0];
uniform float alpha : 1.0;

uniform vec3 specularColor : [0.56, 0.57, 0.58];
uniform float roughness : 0;
uniform float lodLevel : 0;

@import buildin.plugin.compute_shadow_map

void main(){

    vec4 finalColor = vec4(color, alpha);

    vec3 eyePos = viewInverse[3].xyz;
    vec3 V = normalize(eyePos - v_WorldPosition);

    #ifdef DIFFUSEMAP_ENABLED
        vec4 tex = texture2D(diffuseMap, v_Texcoord);
        finalColor.rgb *= tex.rgb;

        #ifdef DIFFUSEMAP_USE_ALPHA
            finalColor.a *= tex.a;
        #endif
    #endif

    vec3 N = v_Normal;
    #ifdef NORMALMAP_ENABLED
        N = texture2D(normalMap, v_Texcoord).xyz * 2.0 - 1.0;
        mat3 tbn = mat3(v_Tangent, v_Bitangent, v_Normal);
        N = normalize(tbn * N);
    #endif

    float NoV = clamp(dot(N, V), 0.0, 1.0);

    vec2 envBRDF = texture2D(BRDFLookup, vec2(roughness, NoV)).rg;
    vec3 L = reflect(-V, N);
    vec3 color1 = textureCube(environmentMap1, L).rgb;
    vec3 color2 = textureCube(environmentMap2, L).rgb;

    vec3 prefilteredColor = mix(color1, color2, roughness - lodLevel);

    gl_FragColor.rgb = prefilteredColor * (specularColor * envBRDF.x + envBRDF.y);
    gl_FragColor.a = 1.0;
}

@end




@export IBL.fragment

#define PI 3.14159265358979

#define SAMPLE_NUMBER 32

uniform mat4 viewInverse : VIEWINVERSE;

varying vec2 v_Texcoord;
varying vec3 v_LocalNormal;
varying vec3 v_Normal;
varying vec3 v_WorldPosition;
varying vec3 v_Tangent;
varying vec3 v_Bitangent;
varying vec3 v_Weight;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D GGXLookup;
uniform samplerCube environmentMap;

uniform vec3 color : [1.0, 1.0, 1.0];
uniform float alpha : 1.0;

uniform vec3 specularColor : [0.56, 0.57, 0.58];
uniform float roughness : 0.5;

@import buildin.plugin.compute_shadow_map

vec3 importanceSampleGGX(float i, float roughness, vec3 N) {
    vec3 H = texture2D(GGXLookup, vec2(roughness, i)).rgb;

    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangentX = normalize(cross(upVector, N));
    vec3 tangentY = cross(N, tangentX);
    // Tangent to world space
    return tangentX * H.x + tangentY * H.y + N * H.z;
}

vec3 importanceSamplePhong(vec2 xi, vec3 N) {
    return vec3(0.0, 0.0, 0.0);
}

float G_Smith(float roughness, float NoV, float NoL) {
    // float k = (roughness+1.0) * (roughness+1.0) * 0.125;
    float k = roughness * roughness / 2.0;
    float G1V = NoV / (NoV * (1.0 - k) + k);
    float G1L = NoL / (NoL * (1.0 - k) + k);
    return G1L * G1V;
}

vec3 specularIBL(vec3 specularColor, float roughness, vec3 N, vec3 V) {
    vec3 specularLighting = vec3(0.0, 0.0, 0.0);
    for (int i = 0; i < SAMPLE_NUMBER; i++) {
        // vec2 xi = hammersley(i, SAMPLE_NUMBER);
        // vec3 H = importanceSampleGGX(xi, roughness, N);
        vec3 H = importanceSampleGGX(float(i) / float(SAMPLE_NUMBER), roughness, N); // Half Vector

        vec3 L = reflect(-V, H);
        float NoV = clamp(dot(N, V), 0.0, 1.0);
        float NoL = clamp(dot(N, L), 0.0, 1.0);
        float NoH = clamp(dot(N, H), 0.0, 1.0);
        float VoH = clamp(dot(V, H), 0.0, 1.0);

        if (NoL > 0.0) {
            // Sample the same L can be fast because of cache
            vec3 sampleColor = textureCube(environmentMap, L).rgb;
            // Fresnel term
            vec3 F = specularColor +  (vec3(1.0) - specularColor) * pow(1.0 - VoH, 5.0);
            float G = G_Smith(roughness, NoV, NoL);

            // Incident light = SampleColor * NoL
            // Microfacet specular = D*G*F / (4*NoL*NoV)
            // pdf = D * NoH / (4 * VoH)
            #ifdef RENDER_FRESNEL
                specularLighting += F;
            #elif defined(RENDER_GEOMETRY)
                specularLighting += G;
            #else
                specularLighting += sampleColor * F * G * VoH / (NoH * NoV);
                // specularLighting += G;
            #endif
        }
    }

    return specularLighting / float(SAMPLE_NUMBER);
}

void main(){

    vec4 finalColor = vec4(color, alpha);

    vec3 eyePos = viewInverse[3].xyz;
    vec3 V = normalize(eyePos - v_WorldPosition);

    #ifdef DIFFUSEMAP_ENABLED
        vec4 tex = texture2D(diffuseMap, v_Texcoord);
        finalColor.rgb *= tex.rgb;

        #ifdef DIFFUSEMAP_USE_ALPHA
            finalColor.a *= tex.a;
        #endif
    #endif

    vec3 normal = v_Normal;
    #ifdef NORMALMAP_ENABLED
        normal = texture2D(normalMap, v_Texcoord).xyz * 2.0 - 1.0;
        mat3 tbn = mat3(v_Tangent, v_Bitangent, v_Normal);
        normal = normalize(tbn * normal);
    #endif

    gl_FragColor.rgb = finalColor.rgb * specularIBL(specularColor, roughness, normal, V);
    gl_FragColor.a = 1.0;
}

@end