// HDR Pipeline
@export buildin.compositor.hdr.bright

uniform sampler2D texture;
uniform float threshold : 1;

varying vec2 v_Texcoord;

const vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);
void main()
{
    vec3 tex = texture2D(texture, v_Texcoord).rgb;
    float lum = dot(tex, lumWeight);
    if (lum > threshold)
    {
        gl_FragColor.rgb = clamp(tex, 0.0, 32.0);
    }
    else
    {
        gl_FragColor.rgb = vec3(0.0);
    }
    gl_FragColor.a = 1.0;
}
@end

@export buildin.compositor.hdr.bloom

uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;

varying vec2 v_Texcoord;

uniform float scale : 0.2;

void main()
{
    vec3 tex1 = texture2D(texture1, v_Texcoord).rgb;
    vec3 tex2 = texture2D(texture2, v_Texcoord).rgb;
    vec3 tex3 = texture2D(texture3, v_Texcoord).rgb;

    gl_FragColor = vec4((tex1 * 2.0 + tex2 * 1.15 + tex3 * 0.45) * scale, 1.0);
}
@end

@export buildin.compositor.hdr.log_lum

varying vec2 v_Texcoord;

uniform sampler2D texture;

const vec3 w = vec3(0.2125, 0.7154, 0.0721);

void main()
{
    vec4 tex = texture2D(texture, v_Texcoord);
    float luminance = dot(tex.rgb, w);
    luminance = log(luminance + 0.001);

    gl_FragColor = vec4(vec3(luminance), 1.0);
}

@end

@export buildin.compositor.hdr.lum_adaption
varying vec2 v_Texcoord;

uniform sampler2D adaptedLum;
uniform sampler2D currentLum;

uniform float frameTime : 0.05;

void main()
{
    float fAdaptedLum = texture2D(adaptedLum, vec2(0.5, 0.5)).r;
    float fCurrentLum = exp(texture2D(currentLum, vec2(0.5, 0.5)).r);

    fAdaptedLum += (fCurrentLum - fAdaptedLum) * (1.0 - pow(0.98, 30.0 * frameTime));
    gl_FragColor.rgb = vec3(fAdaptedLum);
    gl_FragColor.a = 1.0;
}
@end

// Tone mapping with gamma correction
// http://filmicgames.com/archives/75
@export buildin.compositor.hdr.tonemapping_eyeadaption

uniform sampler2D texture;
uniform sampler2D bloom;
uniform sampler2D lum;

varying vec2 v_Texcoord;

const float A = 0.22;
const float B = 0.30;
const float C = 0.10;
const float D = 0.20;
const float E = 0.01;
const float F = 0.30;
const vec3 W = vec3(11.2);

vec3 uncharted2Tonemap(vec3 x)
{
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
float eyeAdaption(float fLum)
{
    return mix(0.2, fLum, 0.5);
}

void main()
{
    vec3 tex = texture2D(texture, v_Texcoord).rgb;
    tex += texture2D(bloom, v_Texcoord).rgb * 0.25;

    // From KlayGE
    float fLum = texture2D(lum, vec2(0.5, 0.5)).r;
    float adaptedLumDest = 1.0 / (max(0.1, 1.0 + 10.0*eyeAdaption(fLum)));
    float exposureBias = adaptedLumDest * 1.6;
    vec3 curr = uncharted2Tonemap(exposureBias * tex);

    vec3 whiteScale = 1.0 / uncharted2Tonemap(W);
    vec3 color = curr * whiteScale;

    color = pow(color, vec3(1.0/2.2));
    gl_FragColor = vec4(color, 1.0);
}

@end

// Tone mapping with gamma correction
// http://filmicgames.com/archives/75
@export buildin.compositor.hdr.tonemapping

uniform sampler2D texture;
uniform sampler2D bloom;
uniform float exposureBias : 1.6;

varying vec2 v_Texcoord;

const float A = 0.22;
const float B = 0.30;
const float C = 0.10;
const float D = 0.20;
const float E = 0.01;
const float F = 0.30;
const vec3 W = vec3(11.2);

vec3 uncharted2Tonemap(vec3 x)
{
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
float eyeAdaption(float fLum)
{
    return mix(0.2, fLum, 0.5);
}

void main()
{
    vec3 tex = texture2D(texture, v_Texcoord).rgb;
    tex += texture2D(bloom, v_Texcoord).rgb * 0.25;

    vec3 curr = uncharted2Tonemap(exposureBias * tex);

    vec3 whiteScale = 1.0 / uncharted2Tonemap(W);
    vec3 color = curr * whiteScale;

    color = pow(color, vec3(1.0/2.2));
    gl_FragColor = vec4(color, 1.0);
}

@end