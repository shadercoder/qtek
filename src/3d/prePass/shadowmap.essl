
@export buildin.sm.depth.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;

attribute vec3 position : POSITION;

#ifdef SKINNING
attribute vec3 weight : WEIGHT;
attribute vec4 joint : JOINT;

uniform mat4 invBindMatrix[JOINT_NUMBER] : INV_BIND_MATRIX;
#endif

varying vec4 v_ViewPosition;
void main(){
    
    vec3 skinnedPosition = position;
    
    #ifdef SKINNING
        mat4 skinMatrix;
        if (joint.x >= 0.0){
            skinMatrix = invBindMatrix[int(joint.x)] * weight.x;
        }
        if (joint.y >= 0.0){
            skinMatrix += invBindMatrix[int(joint.y)] * weight.y;
        }
        if (joint.z >= 0.0){
            skinMatrix += invBindMatrix[int(joint.z)] * weight.z;
        }
        if (joint.w >= 0.0){
            skinMatrix += invBindMatrix[int(joint.w)] * (1.0-weight.x-weight.y-weight.z);
        }
        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;
    #endif

    v_ViewPosition = worldViewProjection * vec4(skinnedPosition, 1.0);
    gl_Position = v_ViewPosition;

}
@end

@export buildin.sm.depth.fragment

varying vec4 v_ViewPosition;
uniform float bias : 0.001;

#extension GL_OES_standard_derivatives : enable

@import buildin.util.pack_depth

void main(){
    // Whats the difference between gl_FragCoord.z and this v_ViewPosition
    // gl_FragCoord consider the polygon offset ?
    float depth = v_ViewPosition.z / v_ViewPosition.w;
    // float depth = gl_FragCoord.z / gl_FragCoord.w;

    #ifdef USE_VSM
        depth = depth * 0.5 + 0.5;
        float moment1 = depth;
        float moment2 = depth * depth;

        // Adjusting moments using partial derivative
        float dx = dFdx(depth);
        float dy = dFdy(depth);
        moment2 += 0.25*(dx*dx+dy*dy);

        gl_FragColor = vec4(moment1, moment2, 0.0, 1.0);
    #else
        // Add slope scaled bias using partial derivative
        depth += max(dFdx(depth), dFdy(depth)) + bias;

        gl_FragColor = packDepth(depth * 0.5 + 0.5);
    #endif
}
@end

@export buildin.sm.debug_depth

uniform sampler2D depthMap;
varying vec2 v_Texcoord;

@import buildin.util.unpack_depth

void main() {
    vec4 tex = texture2D(depthMap, v_Texcoord);
    #ifdef USE_VSM
        gl_FragColor = vec4(tex.rgb, 1.0);
    #else
        float depth = unpackDepth(tex);
        gl_FragColor = vec4(depth, depth, depth, 1.0);
    #endif
}

@end


@export buildin.sm.distance.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 world : WORLD;

attribute vec3 position : POSITION;

#ifdef SKINNING
attribute vec3 boneWeight;
attribute vec4 boneIndex;

uniform mat4 boneMatrices[BONE_MATRICES_NUMBER];
#endif

varying vec3 v_WorldPosition;

void main(){

    vec3 skinnedPosition = position;
    #ifdef SKINNING
        mat4 skinMatrix;
        if(boneIndex.x >= 0.0){
            skinMatrix = boneMatrices[int(boneIndex.x)] * boneWeight.x;
        }
        if(boneIndex.y >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.y)] * boneWeight.y;
        }
        if(boneIndex.z >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.z)] * boneWeight.z;
        }
        if(boneIndex.w >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.w)] * (1.0-boneWeight.x-boneWeight.y-boneWeight.z);
        }
        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;
    #endif

    gl_Position = worldViewProjection * vec4(skinnedPosition , 1.0);
    v_WorldPosition = (world * vec4(skinnedPosition, 1.0)).xyz;
}

@end

@export buildin.sm.distance.fragment

uniform vec3 lightPosition;
uniform float range : 100;

varying vec3 v_WorldPosition;

@import buildin.util.pack_depth

void main(){
    float dist = distance(lightPosition, v_WorldPosition);
    #ifdef USE_VSM
        gl_FragColor = vec4(dist, dist * dist, 0.0, 0.0);
    #else
        dist = dist / range;
        gl_FragColor = packDepth(dist);
    #endif
}
@end

@export buildin.plugin.compute_shadow_map

#if defined(SPOT_LIGHT_SHADOWMAP_NUMBER) || defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER) || defined(POINT_LIGHT_SHADOWMAP_NUMBER)

#ifdef SPOT_LIGHT_SHADOWMAP_NUMBER
uniform sampler2D spotLightShadowMaps[SPOT_LIGHT_SHADOWMAP_NUMBER];
uniform mat4 spotLightMatrices[SPOT_LIGHT_SHADOWMAP_NUMBER];
#endif

#ifdef DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER
#if SHADOW_CASCADE > 1
uniform sampler2D directionalLightShadowMaps[SHADOW_CASCADE];
uniform mat4 directionalLightMatrices[SHADOW_CASCADE];
uniform float shadowCascadeClipsNear[SHADOW_CASCADE];
uniform float shadowCascadeClipsFar[SHADOW_CASCADE];
#else
uniform sampler2D directionalLightShadowMaps[DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER];
uniform mat4 directionalLightMatrices[DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER];
#endif
#endif

#ifdef POINT_LIGHT_SHADOWMAP_NUMBER
uniform samplerCube pointLightShadowMaps[POINT_LIGHT_SHADOWMAP_NUMBER];
uniform float pointLightRanges[POINT_LIGHT_SHADOWMAP_NUMBER];
#endif

uniform bool shadowEnabled : true;

@import buildin.util.unpack_depth

#if defined(DIRECTIONAL_LIGHT_NUMBER) || defined(SPOT_LIGHT_SHADOWMAP_NUMBER)

float tapShadowMap(sampler2D map, vec2 uv, float z){
    vec4 tex = texture2D(map, uv);
    return unpackDepth(tex) * 2.0 - 1.0< z ? 0.0 : 1.0;
}

float pcf(sampler2D map, vec2 uv, float z){

    float shadowContrib = tapShadowMap(map, uv, z);
    float offset = 1.0/1024.0;
    shadowContrib += tapShadowMap(map, uv+vec2(offset, 0.0), z);
    shadowContrib += tapShadowMap(map, uv+vec2(offset, offset), z);
    shadowContrib += tapShadowMap(map, uv+vec2(-offset, offset), z);
    shadowContrib += tapShadowMap(map, uv+vec2(0.0, offset), z);
    shadowContrib += tapShadowMap(map, uv+vec2(-offset, 0.0), z);
    shadowContrib += tapShadowMap(map, uv+vec2(-offset, -offset), z);
    shadowContrib += tapShadowMap(map, uv+vec2(offset, -offset), z);
    shadowContrib += tapShadowMap(map, uv+vec2(0.0, -offset), z);

    return shadowContrib / 9.0;
}
float chebyshevUpperBound(vec2 moments, float z){
    float p = 0.0;
    z = z * 0.5 + 0.5;
    if (z <= moments.x) {
        p = 1.0;
    }
    float variance = moments.y - moments.x * moments.x;
    // http://fabiensanglard.net/shadowmappingVSM/
    variance = max(variance, 0.0000001);
    // Compute probabilistic upper bound. 
    float mD = moments.x - z;
    float pMax = variance / (variance + mD * mD);
    // Now reduce light-bleeding by removing the [0, x] tail and linearly rescaling (x, 1]
    // TODO : bleedBias parameter ?
    pMax = clamp((pMax-0.4)/(1.0-0.4), 0.0, 1.0);
    return max(p, pMax);
}
float computeShadowContrib(sampler2D map, mat4 lightVPM, vec3 position){
    
    vec4 posInLightSpace = lightVPM * vec4(v_WorldPosition, 1.0);
    posInLightSpace.xyz /= posInLightSpace.w;
    float z = posInLightSpace.z;
    // In frustum
    if(all(greaterThan(posInLightSpace.xyz, vec3(-0.99, -0.99, -1.0))) &&
        all(lessThan(posInLightSpace.xyz, vec3(0.99, 0.99, 1.0)))){
        // To texture uv
        vec2 uv = (posInLightSpace.xy+1.0) / 2.0;

        #ifdef USE_VSM
            vec2 moments = texture2D(map, uv).xy;
            return chebyshevUpperBound(moments, z);
        #else
            return pcf(map, uv, z);
        #endif
    }
    return 1.0;
}

#endif

#ifdef POINT_LIGHT_SHADOWMAP_NUMBER

float computeShadowOfCube(samplerCube map, vec3 direction, float range){
    vec4 shadowTex = textureCube(map, direction);
    float dist = length(direction);

    #ifdef USE_VSM
        vec2 moments = shadowTex.xy;
        float variance = moments.y - moments.x * moments.x;
        float mD = moments.x - dist;
        float p = variance / (variance + mD * mD);
        if(moments.x + 0.001 < dist){
            return clamp(p, 0.0, 1.0);
        }else{
            return 1.0;
        }
    #else
        if((unpackDepth(shadowTex) + 0.0002) * range < dist){
            return 0.0;
        }else{
            return 1.0;
        }
    #endif
}
#endif

#if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)

void computeShadowOfSpotLights(vec3 position, inout float shadowContribs[SPOT_LIGHT_NUMBER] ){
    for(int i = 0; i < SPOT_LIGHT_SHADOWMAP_NUMBER; i++){
        float shadowContrib = computeShadowContrib(spotLightShadowMaps[i], spotLightMatrices[i], position);
        shadowContribs[i] = shadowContrib;
    }
    // set default fallof of rest lights
    for(int i = SPOT_LIGHT_SHADOWMAP_NUMBER; i < SPOT_LIGHT_NUMBER; i++){
        shadowContribs[i] = 1.0;
    }
}

#endif


#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)

void computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_NUMBER]){
    #if SHADOW_CASCADE == 1
        for(int i = 0; i < DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER; i++){
            float shadowContrib = computeShadowContrib(directionalLightShadowMaps[i], directionalLightMatrices[i], position);
            shadowContribs[i] = shadowContrib;
        }
    #else
        // http://www.opengl.org/wiki/Compute_eye_space_from_window_space
        float depth = (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far)
                        / (gl_DepthRange.far - gl_DepthRange.near);
        for (int i = 0; i < SHADOW_CASCADE; i++) {
            if (
                depth >= shadowCascadeClipsNear[i] &&
                depth <= shadowCascadeClipsFar[i]
            ) {
                float shadowContrib = computeShadowContrib(directionalLightShadowMaps[i], directionalLightMatrices[i], position);
                shadowContribs[0] = shadowContrib;
                // shadowContribs[0] = float(i) / float(SHADOW_CASCADE);
            }
        }
    #endif
    // set default fallof of rest lights
    for(int i = DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER; i < DIRECTIONAL_LIGHT_NUMBER; i++){
        shadowContribs[i] = 1.0;
    }
}

#endif


#if defined(POINT_LIGHT_SHADOWMAP_NUMBER)

void computeShadowOfPointLights(vec3 position, inout float shadowContribs[POINT_LIGHT_NUMBER] ){
    for(int i = 0; i < POINT_LIGHT_SHADOWMAP_NUMBER; i++){
        vec3 lightPosition = pointLightPosition[i];
        vec3 direction = position - lightPosition;
        shadowContribs[i] = computeShadowOfCube(pointLightShadowMaps[i], direction, pointLightRanges[i]);
    }
    for(int i = POINT_LIGHT_SHADOWMAP_NUMBER; i < POINT_LIGHT_NUMBER; i++){
        shadowContribs[i] = 1.0;
    }
}

#endif

#endif

@end