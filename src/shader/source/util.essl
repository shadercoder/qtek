// Use light attenuation formula in
// http://blog.slindev.com/2011/01/10/natural-light-attenuation/
@export buildin.util.calculate_attenuation

uniform float attenuationFactor : 5.0;

float lightAttenuation(float dist, float range)
{
    float attenuation = 1.0;
    if( range > 0.0)
    {
        attenuation = dist*dist/(range*range);
        float att_s = attenuationFactor;
        attenuation = 1.0/(attenuation*att_s+1.0);
        att_s = 1.0/(att_s+1.0);
        attenuation = attenuation - att_s;
        attenuation /= 1.0 - att_s;
    }
    return attenuation;
}

@end

//http://codeflow.org/entries/2012/aug/02/easy-wireframe-display-with-barycentric-coordinates/
@export buildin.util.edge_factor

float edgeFactor(float width)
{
    vec3 d = fwidth(v_Barycentric);
    vec3 a3 = smoothstep(vec3(0.0), d * width, v_Barycentric);
    return min(min(a3.x, a3.y), a3.z);
}

@end

// Pack depth
// Float value can only be 0.0 - 1.0 ?
@export buildin.util.pack_depth
vec4 packDepth( const in float depth )
{

    const vec4 bitShifts = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );

    const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );
    vec4 res = fract( depth * bitShifts );
    res -= res.xxyz * bit_mask;

    return res;
}
@end

@export buildin.util.unpack_depth
float unpackDepth( const in vec4 colour )
{
    const vec4 bitShifts = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );
    return dot(colour, bitShifts);
}
@end

@export buildin.util.pack_depth_half
vec2 packDepthHalf( const in float depth )
{
    const vec2 bitShifts = vec2(256.0, 1.0);
    const vec4 bitMask = vec4(0.0, 1.0/256.0);

    vec2 rg = fract(depth*bitShifts);
    rg -= rg.xx * bitMask;

    return rg;
}
@end

@export buildin.util.unpack_depth_half
float unpackDepthHalf( const in vec2 rg )
{
    const vec4 bitShifts = vec2(1.0/256.0, 1.0);
    return dot(rg, bitShifts);
}
@end

@export buildin.chunk.skin_matrix
mat4 skinMatrix;
if (joint.x >= 0.0)
{
    skinMatrix = invBindMatrix[int(joint.x)] * weight.x;
}
if (joint.y >= 0.0)
{
    skinMatrix += invBindMatrix[int(joint.y)] * weight.y;
}
if (joint.z >= 0.0)
{
    skinMatrix += invBindMatrix[int(joint.z)] * weight.z;
}
if (joint.w >= 0.0)
{
    skinMatrix += invBindMatrix[int(joint.w)] * (1.0-weight.x-weight.y-weight.z);
}
@end