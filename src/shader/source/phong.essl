
// http://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model

@export buildin.phong.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;
uniform mat4 world : WORLD;

uniform vec2 uvRepeat : [1.0, 1.0];

attribute vec3 position : POSITION;
attribute vec2 texcoord : TEXCOORD_0;
attribute vec3 normal : NORMAL;
attribute vec4 tangent : TANGENT;

attribute vec3 barycentric;

#ifdef SKINNING
attribute vec3 weight : WEIGHT;
attribute vec4 joint : JOINT;

uniform mat4 invBindMatrix[JOINT_NUMBER] : INV_BIND_MATRIX;
#endif

varying vec2 v_Texcoord;
varying vec3 v_Normal;
varying vec3 v_LocalNormal;
varying vec3 v_WorldPosition;
varying vec3 v_Barycentric;

varying vec3 v_Tangent;
varying vec3 v_Bitangent;

varying vec3 v_Weight;

void main()
{
    
    vec3 skinnedPosition = position;
    vec3 skinnedNormal = normal;
    vec3 skinnedTangent = tangent.xyz;
    #ifdef SKINNING
        mat4 skinMatrix;
        if (joint.x >= 0.0)
        {
            skinMatrix = invBindMatrix[int(joint.x)] * weight.x;
        }
        if (joint.y >= 0.0)
        {
            skinMatrix += invBindMatrix[int(joint.y)] * weight.y;
        }
        if (joint.z >= 0.0)
        {
            skinMatrix += invBindMatrix[int(joint.z)] * weight.z;
        }
        if (joint.w >= 0.0)
        {
            skinMatrix += invBindMatrix[int(joint.w)] * (1.0-weight.x-weight.y-weight.z);
        }
        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;
        // Normal matrix ???
        skinnedNormal = (skinMatrix * vec4(normal, 0.0)).xyz;
        skinnedTangent = (skinMatrix * vec4(tangent.xyz, 0.0)).xyz;
    #endif

    gl_Position = worldViewProjection * vec4(skinnedPosition, 1.0);

    v_Texcoord = texcoord * uvRepeat;
    v_WorldPosition = (world * vec4(skinnedPosition, 1.0)).xyz;
    v_Barycentric = barycentric;

    v_LocalNormal = skinnedNormal;
    v_Normal = normalize((worldInverseTranspose * vec4(skinnedNormal, 0.0)).xyz);
    v_Tangent = normalize((worldInverseTranspose * vec4(skinnedTangent, 0.0)).xyz);
    v_Bitangent = normalize(cross(v_Normal, v_Tangent) * tangent.w);

    #ifdef SKINNING
        v_Weight = weight;
    #else
        v_Weight = vec3(1.0);
    #endif
}

@end


@export buildin.phong.fragment

uniform mat4 viewInverse : VIEWINVERSE;

varying vec2 v_Texcoord;
varying vec3 v_LocalNormal;
varying vec3 v_Normal;
varying vec3 v_WorldPosition;
varying vec3 v_Tangent;
varying vec3 v_Bitangent;
varying vec3 v_Weight;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform samplerCube environmentMap;

uniform vec3 color : [1.0, 1.0, 1.0];
uniform float alpha : 1.0;

uniform float shininess : 30;

uniform vec3 specular : [1.0, 1.0, 1.0];
uniform vec3 emission : [0.0, 0.0, 0.0];

uniform float reflectivity : 0.5;

// Uniforms for wireframe
uniform float lineWidth : 0.0;
uniform vec3 lineColor : [0.0, 0.0, 0.0];
varying vec3 v_Barycentric;

#ifdef AMBIENT_LIGHT_NUMBER
@import buildin.header.ambient_light
#endif
#ifdef POINT_LIGHT_NUMBER
@import buildin.header.point_light
#endif
#ifdef DIRECTIONAL_LIGHT_NUMBER
@import buildin.header.directional_light
#endif
#ifdef SPOT_LIGHT_NUMBER
@import buildin.header.spot_light
#endif

#extension GL_OES_standard_derivatives : enable
// Import util functions and uniforms needed
@import buildin.util.calculate_attenuation

@import buildin.util.edge_factor

@import buildin.plugin.compute_shadow_map

void main()
{
    
    #ifdef RENDER_WEIGHT
        gl_FragColor = vec4(v_Weight.xyz, 1.0);
        return;
    #endif
    #ifdef RENDER_TEXCOORD
        gl_FragColor = vec4(v_Texcoord, 1.0, 1.0);
        return;
    #endif

    vec4 finalColor = vec4(color, alpha);

    vec3 eyePos = viewInverse[3].xyz;
    vec3 viewDirection = normalize(eyePos - v_WorldPosition);

    #ifdef DIFFUSEMAP_ENABLED
        vec4 tex = texture2D(diffuseMap, v_Texcoord);
        finalColor.rgb *= tex.rgb;

        #ifdef DIFFUSEMAP_USE_ALPHA
            finalColor.a *= tex.a;
        #endif
    #endif

    vec3 normal = v_Normal;
    #ifdef NORMALMAP_ENABLED
        normal = texture2D(normalMap, v_Texcoord).xyz * 2.0 - 1.0;
        mat3 tbn = mat3(v_Tangent, v_Bitangent, v_Normal);
        normal = normalize(tbn * normal);
    #endif

    #ifdef RENDER_NORMAL
        gl_FragColor = vec4(normal, 1.0);
        return;
    #endif

    // Diffuse part of all lights
    vec3 diffuseItem = vec3(0.0, 0.0, 0.0);
    // Specular part of all lights
    vec3 specularItem = vec3(0.0, 0.0, 0.0);
    
    #ifdef AMBIENT_LIGHT_NUMBER
        for(int i = 0; i < AMBIENT_LIGHT_NUMBER; i++)
        {
            diffuseItem += ambientLightColor[i];
        }
    #endif
    #ifdef POINT_LIGHT_NUMBER
        #if defined(POINT_LIGHT_SHADOWMAP_NUMBER)
            float shadowContribs[POINT_LIGHT_NUMBER];
            if(shadowEnabled)
            {
                computeShadowOfPointLights(v_WorldPosition, shadowContribs);
            }
        #endif
        for(int i = 0; i < POINT_LIGHT_NUMBER; i++)
        {

            vec3 lightPosition = pointLightPosition[i];
            vec3 lightColor = pointLightColor[i];
            float range = pointLightRange[i];

            vec3 lightDirection = lightPosition - v_WorldPosition;

            // Calculate point light attenuation
            float dist = length(lightDirection);
            float attenuation = calculateAttenuation(dist, range); 

            // Normalize vectors
            lightDirection /= dist;
            vec3 halfVector = normalize(lightDirection + viewDirection);

            float ndh = dot(normal, halfVector);
            ndh = clamp(ndh, 0.0, 1.0);

            float ndl = dot(normal,  lightDirection);
            ndl = clamp(ndl, 0.0, 1.0);

            float shadowContrib = 1.0;
            #if defined(POINT_LIGHT_SHADOWMAP_NUMBER)
                if(shadowEnabled)
                {
                    shadowContrib = shadowContribs[i];
                }
            #endif

            diffuseItem += lightColor * ndl * attenuation * shadowContrib;

            if (shininess > 0.0)
            {
                specularItem += lightColor * ndl * pow(ndh, shininess) * attenuation * shadowContrib;
            }

        }
    #endif

    #ifdef DIRECTIONAL_LIGHT_NUMBER
        #if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)
            float shadowContribs[DIRECTIONAL_LIGHT_NUMBER];
            if(shadowEnabled)
            {
                computeShadowOfDirectionalLights(v_WorldPosition, shadowContribs);
            }
        #endif
        for(int i = 0; i < DIRECTIONAL_LIGHT_NUMBER; i++)
        {

            vec3 lightDirection = -normalize(directionalLightDirection[i]);
            vec3 lightColor = directionalLightColor[i];

            vec3 halfVector = normalize(lightDirection + viewDirection);

            float ndh = dot(normal, halfVector);
            ndh = clamp(ndh, 0.0, 1.0);

            float ndl = dot(normal, lightDirection);
            ndl = clamp(ndl, 0.0, 1.0);

            float shadowContrib = 1.0;
            #if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)
                if(shadowEnabled)
                {
                    shadowContrib = shadowContribs[i];
                }
            #endif

            diffuseItem += lightColor * ndl * shadowContrib;

            if (shininess > 0.0)
            {
                specularItem += lightColor * ndl * pow(ndh, shininess) * shadowContrib;
            }
        }
    #endif

    #ifdef SPOT_LIGHT_NUMBER
        #if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)
            float shadowContribs[SPOT_LIGHT_NUMBER];
            if(shadowEnabled)
            {
                computeShadowOfSpotLights(v_WorldPosition, shadowContribs);
            }
        #endif
        for(int i = 0; i < SPOT_LIGHT_NUMBER; i++)
        {
            vec3 lightPosition = spotLightPosition[i];
            vec3 spotLightDirection = -normalize(spotLightDirection[i]);
            vec3 lightColor = spotLightColor[i];
            float range = spotLightRange[i];
            float umbraAngleCosine = spotLightUmbraAngleCosine[i];
            float penumbraAngleCosine = spotLightPenumbraAngleCosine[i];
            float falloffFactor = spotLightFalloffFactor[i];

            vec3 lightDirection = lightPosition - v_WorldPosition;
            // Calculate attenuation
            float dist = length(lightDirection);
            float attenuation = calculateAttenuation(dist, range); 

            // Normalize light direction
            lightDirection /= dist;
            // Calculate spot light fall off
            float lightDirectCosine = dot(spotLightDirection, lightDirection);

            float falloff;
            // Fomular from real-time-rendering
            falloff = clamp((lightDirectCosine-umbraAngleCosine)/(penumbraAngleCosine-umbraAngleCosine), 0.0, 1.0);
            falloff = pow(falloff, falloffFactor);

            vec3 halfVector = normalize(lightDirection + viewDirection);

            float ndh = dot(normal, halfVector);
            ndh = clamp(ndh, 0.0, 1.0);

            float ndl = dot(normal, lightDirection);
            ndl = clamp(ndl, 0.0, 1.0);

            float shadowContrib = 1.0;
            #if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)
                if (shadowEnabled)
                {
                    shadowContrib = shadowContribs[i];
                }
            #endif

            diffuseItem += lightColor * ndl * attenuation * (1.0-falloff) * shadowContrib;

            if (shininess > 0.0)
            {
                specularItem += lightColor * ndl * pow(ndh, shininess) * attenuation * (1.0-falloff) * shadowContrib;
            }
        }
    #endif

    finalColor.rgb *= diffuseItem;
    finalColor.rgb += specularItem * specular;
    finalColor.rgb += emission;

    #ifdef ENVIRONMENTMAP_ENABLED
        vec3 envTex = textureCube(environmentMap, reflect(-viewDirection, normal)).xyz;
        finalColor.rgb = finalColor.rgb + envTex * reflectivity;
    #endif

    if(lineWidth > 0.01)
    {
        finalColor.rgb = finalColor.rgb * mix(lineColor, vec3(1.0), edgeFactor(lineWidth));
    }

    gl_FragColor = finalColor;
}

@end