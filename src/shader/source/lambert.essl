/**
 * http://en.wikipedia.org/wiki/Lambertian_reflectance
 */

@export buildin.lambert.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;
uniform mat4 world : WORLD;

uniform vec2 uvRepeat : [1.0, 1.0];

attribute vec3 position : POSITION;
attribute vec2 texcoord : TEXCOORD_0;
attribute vec3 normal : NORMAL;

attribute vec3 barycentric;

#ifdef SKINNING
attribute vec3 weight : WEIGHT;
attribute vec4 joint : JOINT;

uniform mat4 invBindMatrix[JOINT_NUMBER] : INV_BIND_MATRIX;
#endif

varying vec2 v_Texcoord;
varying vec3 v_Normal;
varying vec3 v_WorldPosition;
varying vec3 v_Barycentric;
varying vec3 v_Weight;

void main()
{

    vec3 skinnedPosition = position;
    vec3 skinnedNormal = normal;

    #ifdef SKINNING
        
        @import buildin.chunk.skin_matrix

        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;
        // Normal matrix ???
        skinnedNormal = (skinMatrix * vec4(normal, 0.0)).xyz;
    #endif

    gl_Position = worldViewProjection * vec4( skinnedPosition, 1.0 );

    v_Texcoord = texcoord * uvRepeat;
    v_Normal = normalize( ( worldInverseTranspose * vec4(skinnedNormal, 0.0) ).xyz );
    v_WorldPosition = ( world * vec4( skinnedPosition, 1.0) ).xyz;

    v_Barycentric = barycentric;
    #ifdef SKINNING
        v_Weight = weight;
    #else
        v_Weight = vec3(0.0);
    #endif
}

@end




@export buildin.lambert.fragment

varying vec2 v_Texcoord;
varying vec3 v_Normal;
varying vec3 v_WorldPosition;
varying vec3 v_Weight;

uniform sampler2D diffuseMap;
uniform sampler2D alphaMap;

uniform vec3 color : [1.0, 1.0, 1.0];
uniform vec3 emission : [0.0, 0.0, 0.0];
uniform float alpha : 1.0;

// Uniforms for wireframe
uniform float lineWidth : 0.0;
uniform vec3 lineColor : [0.0, 0.0, 0.0];
varying vec3 v_Barycentric;

#ifdef AMBIENT_LIGHT_NUMBER
@import buildin.header.ambient_light
#endif
#ifdef POINT_LIGHT_NUMBER
@import buildin.header.point_light
#endif
#ifdef DIRECTIONAL_LIGHT_NUMBER
@import buildin.header.directional_light
#endif
#ifdef SPOT_LIGHT_NUMBER
@import buildin.header.spot_light
#endif

#extension GL_OES_standard_derivatives : enable
// Import util functions and uniforms needed
@import buildin.util.calculate_attenuation

@import buildin.util.edge_factor

@import buildin.plugin.compute_shadow_map

void main()
{
    
    #ifdef RENDER_WEIGHT
        gl_FragColor = vec4(v_Weight, 1.0);
        return;
    #endif
    #ifdef RENDER_NORMAL
        gl_FragColor = vec4(v_Normal, 1.0);
        return;
    #endif
    #ifdef RENDER_TEXCOORD
        gl_FragColor = vec4(v_Texcoord, 1.0, 1.0);
        return;
    #endif

    gl_FragColor = vec4(color, alpha);

    #ifdef DIFFUSEMAP_ENABLED
        vec4 tex = texture2D( diffuseMap, v_Texcoord );
        #ifdef SRGB_DECODE
            tex.rgb = pow(tex.rgb, vec3(2.2));
        #endif
        gl_FragColor.rgb *= tex.rgb;
        #ifdef DIFFUSEMAP_USE_ALPHA
            gl_FragColor.a *= tex.a;
        #endif
    #endif

    vec3 diffuseColor = vec3(0.0, 0.0, 0.0);
    
    #ifdef AMBIENT_LIGHT_NUMBER
        for(int i = 0; i < AMBIENT_LIGHT_NUMBER; i++)
        {
            diffuseColor += ambientLightColor[i];
        }
    #endif
    // Compute point light color
    #ifdef POINT_LIGHT_NUMBER
        #if defined(POINT_LIGHT_SHADOWMAP_NUMBER)
            float shadowContribs[POINT_LIGHT_NUMBER];
            if( shadowEnabled )
            {
                computeShadowOfPointLights( v_WorldPosition, shadowContribs );
            }
        #endif
        for(int i = 0; i < POINT_LIGHT_NUMBER; i++)
        {

            vec3 lightPosition = pointLightPosition[i];
            vec3 lightColor = pointLightColor[i];
            float range = pointLightRange[i];

            vec3 lightDirection = lightPosition - v_WorldPosition;

            // Calculate point light attenuation
            float dist = length(lightDirection);
            float attenuation = calculateAttenuation(dist, range);

            // Normalize vectors
            lightDirection /= dist;

            float ndl = dot( v_Normal, lightDirection );

            float shadowContrib = 1.0;
            #if defined(POINT_LIGHT_SHADOWMAP_NUMBER)
                if( shadowEnabled )
                {
                    shadowContrib = shadowContribs[i];
                }
            #endif

            diffuseColor += lightColor * clamp(ndl, 0.0, 1.0) * attenuation * shadowContrib;
        }
    #endif
    #ifdef DIRECTIONAL_LIGHT_NUMBER
        #if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)
            float shadowContribs[DIRECTIONAL_LIGHT_NUMBER];
            if(shadowEnabled)
            {
                computeShadowOfDirectionalLights( v_WorldPosition, shadowContribs );
            }
        #endif
        for(int i = 0; i < DIRECTIONAL_LIGHT_NUMBER; i++)
        {
            vec3 lightDirection = -directionalLightDirection[i];
            vec3 lightColor = directionalLightColor[i];
            
            float ndl = dot( v_Normal, normalize( lightDirection ) );

            float shadowContrib = 1.0;
            #if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)
                if( shadowEnabled )
                {
                    shadowContrib = shadowContribs[i];
                }
            #endif

            diffuseColor += lightColor * clamp(ndl, 0.0, 1.0) * shadowContrib;
        }
    #endif
    
    #ifdef SPOT_LIGHT_NUMBER
        #if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)
            float shadowContribs[SPOT_LIGHT_NUMBER];
            if( shadowEnabled )
            {
                computeShadowOfSpotLights( v_WorldPosition, shadowContribs );
            }
        #endif
        for(int i = 0; i < SPOT_LIGHT_NUMBER; i++)
        {
            vec3 lightPosition = -spotLightPosition[i];
            vec3 spotLightDirection = -normalize( spotLightDirection[i] );
            vec3 lightColor = spotLightColor[i];
            float range = spotLightRange[i];
            float umbraAngleCosine = spotLightUmbraAngleCosine[i];
            float penumbraAngleCosine = spotLightPenumbraAngleCosine[i];
            float falloffFactor = spotLightFalloffFactor[i];

            vec3 lightDirection = lightPosition - v_WorldPosition;
            // Calculate attenuation
            float dist = length(lightDirection);
            float attenuation = calculateAttenuation(dist, range); 

            // Normalize light direction
            lightDirection /= dist;
            // Calculate spot light fall off
            float lightDirectCosine = dot(spotLightDirection, lightDirection);

            float falloff;
            falloff = clamp((lightDirectCosine-umbraAngleCosine)/(penumbraAngleCosine-umbraAngleCosine), 0.0, 1.0);
            falloff = pow(falloff, falloffFactor);

            float ndl = dot(v_Normal, lightDirection);
            ndl = clamp(ndl, 0.0, 1.0);

            float shadowContrib = 1.0;
            #if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)
                if( shadowEnabled )
                {
                    shadowContrib = shadowContribs[i];
                }
            #endif

            diffuseColor += lightColor * ndl * attenuation * (1.0-falloff) * shadowContrib;

        }
    #endif

    gl_FragColor.rgb *= diffuseColor;
    gl_FragColor.rgb += emission;
    if(lineWidth > 0.01)
    {
        gl_FragColor.rgb = gl_FragColor.rgb * mix(lineColor, vec3(1.0), edgeFactor(lineWidth));
    }
}

@end