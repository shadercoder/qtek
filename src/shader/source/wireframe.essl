@export buildin.wireframe.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 world : WORLD;

attribute vec3 position : POSITION;
attribute vec3 barycentric;

#ifdef SKINNING
attribute vec3 weight : WEIGHT;
attribute vec4 joint : JOINT;

uniform mat4 invBindMatrix[JOINT_NUMBER] : INV_BIND_MATRIX;
#endif

varying vec3 v_Barycentric;

void main()
{

    vec3 skinnedPosition = position;
    #ifdef SKINNING
        mat4 skinMatrix;
        if (joint.x >= 0.0)
        {
            skinMatrix = invBindMatrix[int(joint.x)] * weight.x;
        }
        if (joint.y >= 0.0)
        {
            skinMatrix += invBindMatrix[int(joint.y)] * weight.y;
        }
        if (joint.z >= 0.0)
        {
            skinMatrix += invBindMatrix[int(joint.z)] * weight.z;
        }
        if (joint.w >= 0.0)
        {
            skinMatrix += invBindMatrix[int(joint.w)] * (1.0-weight.x-weight.y-weight.z);
        }
        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;
    #endif

    gl_Position = worldViewProjection * vec4(skinnedPosition, 1.0 );

    v_Barycentric = barycentric;
}

@end


@export buildin.wireframe.fragment

uniform vec3 color : [0.0, 0.0, 0.0];

uniform float alpha : 1.0;
uniform float lineWidth : 1.0;

varying vec3 v_Barycentric;

#extension GL_OES_standard_derivatives : enable

@import buildin.util.edge_factor

void main()
{

    gl_FragColor.rgb = color;
    gl_FragColor.a = ( 1.0-edgeFactor(lineWidth) ) * alpha;
}

@end